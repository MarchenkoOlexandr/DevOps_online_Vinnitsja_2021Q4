#-------------------------------
# Project DevOps_Vinnytsja PDOV
# Create VM for Jenkins
# Made by Olexandr Marchenko 
#-------------------------------


provider "aws" {
	region = var.region
}

data "aws_ami" "latest_ubuntu" {
	owners = ["099720109477"]
	most_recent = true
	filter {
		name = "name"
		values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
	}
}

output "latest_ubuntu_ami_id" {
	value = data.aws_ami.latest_ubuntu.id
}

output "latest_ubuntu_ami_name" {
	value = data.aws_ami.latest_ubuntu.name
}

## Optinally you can even output the private key content, though not recommended
output "ssh_key" {
  description = "ssh key generated by terraform"
  value       = tls_private_key.ubuntuaws_jenkins.private_key_pem
}

## Generate SSH key content using terraform

resource "tls_private_key" "ubuntuaws_jenkins" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

## Create a AWS key pair using the ssh key generated previously
## Stores the public key in aws and private key in the local system

resource "aws_key_pair" "generated_key" {
  key_name   = "${var.key_name}"
  public_key = "${tls_private_key.ubuntuaws_jenkins.public_key_openssh}"
  
  provisioner "local-exec" {    # Generate "terraform-key-pair.pem" in current directory
    command = <<-EOT
      echo '${tls_private_key.ubuntuaws_jenkins.private_key_pem}' > ./'${var.key_name}'.pem
      chmod 400 ./'${var.key_name}'.pem
    EOT
  }
}

resource "aws_instance" "my_Ubuntu_Jenkins" {
	count = 1
	ami = data.aws_ami.latest_ubuntu.id
	instance_type = var.instance_type
	vpc_security_group_ids = [aws_security_group.Ubuntu_Jenkins.id]
	key_name      = "${aws_key_pair.generated_key.key_name}"
	user_data = file("user_data.sh")
/*	user_data = <<EOF
echo "install java.................................................................."
sudo apt update -y
sudo apt upgrade -y
sudo apt install openjdk-11-jdk -y
echo "install jenkins................................................................."
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \/usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \ https://pkg.jenkins.io/debian-stable binary/ | sudo tee \/etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get install jenkins -y
sudo service jenkins start
sudo service jenkins status
sleep 40
echo "install password.................................................................."
curl -O http://127.0.0.1:8080/jnlpJars/jenkins-cli.jar && pswd=`sudo cat /var/lib/jenkins/secrets/initialAdminPassword` && echo 'jenkins.model.Jenkins.instance.securityRealm.createAccount("login", "password")' | sudo java -jar jenkins-cli.jar -auth admin:$pswd -s http://127.0.0.1:8080/ groovy =
sudo service jenkins restart	
EOF
*/	
	tags = {
		Name = "Ubuntu_Jenkins"
		Qwner = "Marchenko"
		Project = "DevOps_Vinnytsja"
	}
	
	lifecycle {
	prevent_destroy = true
	
	}
	
}

resource "aws_security_group" "Ubuntu_Jenkins" {
	name = "Ubuntu_Jenkins Security Group"
	description = "Ubuntu_Jenkins Security Group"
	
	ingress {
		from_port = 80
		to_port = 80
		protocol = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}
	
	ingress {
		from_port = 22
		to_port = 22
		protocol = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}	
	
	ingress {
		from_port = 8080
		to_port = 8080
		protocol = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}
	
	egress {
		from_port = 0
		to_port = 0
		protocol = "-1"
		cidr_blocks = ["0.0.0.0/0"]	
	}
	
	tags = {
		Name = "Ubuntu_Jenkins Security Group"
		Qwner = "Marchenko"
		Project = "DevOps_Vinnytsja"
	}
	
}
/*
data "aws_instance" "my_Ubuntu_Jenkins_public_ip" {
	public_ip = "public_ip'
}

output "my_Ubuntu_Jenkins_public_ip_adress" {
	value = data.aws_instance.my_Ubuntu_Jenkins_public_ip.public_ip
}
*/